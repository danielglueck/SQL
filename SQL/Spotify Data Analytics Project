For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL.

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL);

1. Determining the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

2. Determining the top 10 artists by using the popularity metric
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10;

3. Determining the average populartiy of the artist by most popular to least popular
SELECT artist_name, avg(popularity) Popu
FROM BIT_DB.Spotifydata
Group by artist_name
ORDER BY Popu desc;

4. Determining the most popular artist/song based on the key that the song was written and how loud the song was.
SELECT artist_name artist, track_name song, AVG(popularity) Popu, song_key as key, loudness decimal, 
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY Popu desc;

5. Determining the top 10 acoustical, livelyness, and tempo rank of each song based on the average popularity 
SELECT artist_name artist, track_name song, AVG(popularity) Popu, acousticness decimal,liveness decimal,tempo decimal
From BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY Popu Asc
LIMIT 10;

6. Determining which songs are danceable songs ascending and descending 
SELECT popularity, danceability,
CASE
    When danceability <=0.5 THEN "low danceability"
    WHEN danceability >=0.5 THEN "high danceability"
    END levelofdanceability
    FROM BIT_DB.Spotifydata
    Group BY popularity
    Order by popularity desc;
    
SELECT popularity, danceability,
CASE
    When danceability <=0.5 THEN "low danceability"
    WHEN danceability >=0.5 THEN "high danceability"
    END levelofdanceability
    FROM BIT_DB.Spotifydata
    Group BY popularity
    Order by popularity asc 
